---
title: "Reproducible and Collaborative Workflows"
subtitle: "Using RStudio and GitHub"
execute:
  echo: true
  eval: true
  freeze: auto
format: 
  revealjs:
    logo: "../images/logo.png"
    footer: |
      4th Crossing the Paleontological-Ecological Gap (CPEG) Meeting &\
      3rd Conservation Paleobiology Symposium
    theme: simple
    embed-resources: true
    output-file: "rproj_github.html"
    mermaid:
      theme: default
---

## Goals

- Understand the importance of reproducible workflows and version control
- Learn how to set up a project in RStudio
- Explore version control with GitHub and GitHub Desktop
- Fork, edit, and publish a GitHub repository

::: notes
:::

## Why reproducible workflows are important

::: {.incremental}

- Its good science
- Improves uptake of methods
- Ease of collaborations
- Funders love Open Science

:::

::: notes
:::

## What makes a workflow reproducible?

- Works on any machine
- Yields identical results every time
- Can be understood by externals (and future self)


::: notes
:::

## Workspace Hygiene

. . .

**Start from a clean slate!**

. . .


Your workspace is your laboratory - keep it free of contamination!

. . .

***Tools > Global Options > General***

In the "Basic" tab

- Unceck "Restore .RData into workspace at startup"
- Set "Save workspace to .RData on exit" to "Never"

## Workspace Hygiene {.nostretch}

![](images/workspace_hygiene.png){fig-align="center" width="60%"}

## Absolute and Relative Paths

. . .

Your code should run on any machine!

. . .

```{r}
#| eval: false
#| echo: true
# BAD PRACTICE: path and data does not exist on other machines
read.csv("C:/path/to/important/raw/data.csv")
```

. . .

```{r}
#| eval: false
#| echo: true
# BAD PRACTICE: works only on one specific machine
setwd("C:/path/to/folder/that/only/exists/on/my/machine")
```

. . .

```{r}
#| eval: false
#| echo: true
# BAD PRACTICE: requires manual work
# to run this script, go to
# Session -> Set Working Directory -> To Source File Location
# to set your working directory correctly
```


## Introducing: RProjects

::: {.incremental}

- Project files that set working directory automatically after opening the project
- Whole project folder can be passed between machines and people
- Specific to RStudio

:::


## Working with RProjects



:::: {.columns}

::: {.column width="50%"}

File > Open Project > Select RProject file

Work in Rstudio as usual

All paths are set relative to the .RProject file

:::

::: {.column width="50%"}

![](images/new_project.png){fig-align="center" width="100%"}

:::

::::

::: notes
:::

## Advanced RProjects

RProjects are critical infrastructure for R code

::: {.incremental}
- [Multiple projects in parallel](https://support.posit.co/hc/en-us/articles/200526207-Using-RStudio-Projects)
- [Reproducible environments & package versioning using `renv`](https://rstudio.github.io/renv/articles/renv.html)
- [Packaging of R code](https://r-pkgs.org/)


:::

## {.smaller #version-history-vs-version-control data-menu-title="Version history vs version control"}

:::: {.columns}

::: {.column width="45%"}
### Version history

```{mermaid}
%%| echo: false
gitGraph
    commit id: "Initial commit"
    commit id: "Add data"
    commit id: "Add analysis script"
    commit id: "Update analysis script"
```

:::: {.absolute top=300 width="45%"}
- Tracked changes
- Allows for rollbacks
- Easy collaboration, but with potential conflicts
- Software determines save points
- No experimentation
- Can lead to feature breakage
::::

:::

::: {.column width="10%" .fragment fragment-index=1}
### vs
:::

::: {.column width="45%" .fragment fragment-index=1}
### Version control

```{mermaid}
%%| echo: false
gitGraph
    commit id: "Initial commit"
    commit id: "Add data"
    commit id: "Add analysis script"
    branch will
    commit id: "Add viz script"
    checkout main
    commit id: "Update analysis script"
    merge will
    
```

::::{.absolute top=300}
- Tracked changes
- Allows for rollbacks
- Easier collaboration without direct conflicts
- Users determine save points
- Allows for experimentation
- Prevents feature breakage
::::

:::

::::

::: notes
:::

## Version control and collaboration

![](images/version_history_and_control.jpeg){fig-align="center" width="60%"}

::: notes
Version history is not the same as version control. Version history is a record of changes made to a file, while version control is a system that manages changes to files and allows for collaboration among multiple users. Version control systems like Git provide features such as branching, merging, and conflict resolution, which are essential for collaborative work.
:::

## Version control with git and GitHub

![](images/github.png){fig-align="center" width="100%"}

## Repositories

[![](images/repos.png){fig-align="center" width="60%"}](https://github.com/willgearty?tab=repositories)

<center>
[https://github.com/willgearty?tab=repositories](https://github.com/willgearty?tab=repositories)
</center>

::: notes
Repositories, aka "repos", represent independent file environments on GitHub.
:::

## Repositories (cont.)

![](images/cpeg_repo.png){fig-align="center" width="60%"}

<center>
[https://github.com/palaeoverse/2025-CPEG-workshop](https://github.com/palaeoverse/2025-CPEG-workshop)
</center>

::: notes
Point out:
- file structure: has files and folders
- README: emphasize the importance of a README file for providing context and instructions for the repository
- license: mention that the license file is important for specifying how others can use the code and data in the repository
- contributors: can see who has contributed to the repository and their contributions
:::

## Forking a repository

You can easily make your own copy of a repository by "forking" it

![](images/cpeg_repo_fork.png){fig-align="center" width="80%"}

::: notes
Walk through this process with everyone. Make sure everyone has forked the repository before moving on.
:::

## Cloning your new repository

Now we're going to "clone" this repo to our local machine using GitHub Desktop. You can also do this in RStudio, but we will use GitHub Desktop for this example.

:::: {.columns}

::: {.column width="50%"}
![](images/github_clone.png){fig-align="center"}
:::

::: {.column width="50%"}
![](images/github_desktop_clone.png){fig-align="center"}
:::

::::

::: notes
Walk through this process with everyone. You will need to select the folder where you want to clone the repository. Make sure everyone has cloned the repository before moving on.
:::

## Making a new R project

Now let's make a new R project based on this cloned repository...

:::: {.columns}

::: {.column width="30%"}
![](images/new_project_menu.png){fig-align="center"}
:::

::: {.column width="35%"}
![](images/existing_directory.png){fig-align="center"}
:::

::: {.column width="35%"}
![](images/create_project.png){fig-align="center"}
:::

::::

::: notes

:::

## Git in RStudio

![](images/git_panel.png){fig-align="center"}

## Making and committing changes {.smaller}

Now let's make some changes to the repository:

1. Open the `README.md` file in RStudio and add some text to it. Perhaps your name or today's date. Make sure to save the file.
2. You'll now see that the `README.md` file has been modified in the Git panel in RStudio.
3. Click the checkbox next to the `README.md` file in the Git panel to stage the changes.
4. In the "Commit message" box, write a brief description of the changes you made (e.g., "Added my name to README").
5. Click the "Commit" button to commit the changes to your local repository.
6. Click the "Push" button in the Git panel to upload your changes to GitHub.

::: notes

:::

## Advanced GitHub {.smaller}

Some other topics that you can explore on your own:

- [Branching and Merging](https://docs.github.com/en/get-started/using-github/github-flow): Manage changes to your codebase with branches and merge them back into the main branch
- [GitHub Issues](https://docs.github.com/en/issues): Track bugs and feature requests (yes, this applies to research code!)
- [Pull Requests](https://docs.github.com/en/pull-requests): Propose changes to a repository and collaborate with others
- [GitHub Actions](https://docs.github.com/en/actions): Automate workflows
- [GitHub Pages](https://pages.github.com/): Host websites directly from your GitHub repository

